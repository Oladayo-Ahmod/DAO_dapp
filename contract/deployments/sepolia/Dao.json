{
  "address": "0x7Ca399e97c9E676Ce469B0611901a4E6EA9F6904",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upVote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "downVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "VoteAction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct Dao.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct Dao.Proposals[]",
          "name": "props",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContributorsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposalVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct Dao.Voted[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct Dao.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isContributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "payBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "performVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct Dao.Voted",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeholderStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6332bf85888751d1f67292c59e27fb5251d198d83540fc861951fb09abdc0cb3",
  "receipt": {
    "to": null,
    "from": "0x5edD40d4e0681eaDF2b697693FA61DAE1c372931",
    "contractAddress": "0x7Ca399e97c9E676Ce469B0611901a4E6EA9F6904",
    "transactionIndex": 34,
    "gasUsed": "3648945",
    "logsBloom": "0x
    "blockHash": "0x89c333b735f73d4a7c72b8b37705172933dde305f80d2e0d8b70b91d66f78ebf",
    "transactionHash": "0x6332bf85888751d1f67292c59e27fb5251d198d83540fc861951fb09abdc0cb3",
    "logs": [],
    "blockNumber": 3874436,
    "cumulativeGasUsed": "14977161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3df3b5642c57dcf9e0abffb974acd22e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"VoteAction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct Dao.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct Dao.Proposals[]\",\"name\":\"props\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposalVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct Dao.Voted[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct Dao.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"payBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"performVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct Dao.Voted\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholderStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"Dao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier : UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Dao is AccessControl,ReentrancyGuard {\\r\\n    uint256 totalProposals;\\r\\n    uint256 balance;\\r\\n    address deployer;\\r\\n\\r\\n    uint256 immutable STAKEHOLDER_MIN_CONTRIBUTION = 0.1 ether;\\r\\n    uint256 immutable MIN_VOTE_PERIOD = 5 minutes;\\r\\n    bytes32 private immutable COLLABORATOR_ROLE = keccak256(\\\"collaborator\\\");  \\r\\n    bytes32 private immutable STAKEHOLDER_ROLE = keccak256(\\\"stakeholder\\\");    \\r\\n\\r\\n    mapping(uint256 => Proposals) private raisedProposals;\\r\\n    mapping(address => uint256[]) private stakeholderVotes;\\r\\n    mapping(uint256 => Voted[]) private votedOn;\\r\\n    mapping(address => uint256) private contributors;\\r\\n    mapping(address => uint256) private stakeholders;\\r\\n\\r\\n    event ProposalAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event VoteAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        uint256 upVote,\\r\\n        uint256 downVotes,\\r\\n        bool chosen\\r\\n    );\\r\\n\\r\\n    struct Proposals {\\r\\n        uint256 id;\\r\\n        uint256 amount;\\r\\n        uint256 upVote;\\r\\n        uint256 downVotes;\\r\\n        uint256 duration;\\r\\n        string title;\\r\\n        string description;\\r\\n        bool paid;\\r\\n        bool passed;\\r\\n        address payable beneficiary;\\r\\n        address propoper;\\r\\n        address executor;\\r\\n    }\\r\\n\\r\\n    struct Voted {\\r\\n        address voter;\\r\\n        uint256 timestamp;\\r\\n        bool chosen;\\r\\n    }\\r\\n\\r\\n    modifier stakeholderOnly(string memory message) {\\r\\n        require(hasRole(STAKEHOLDER_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n    modifier contributorOnly(string memory message){\\r\\n        require(hasRole(COLLABORATOR_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeployer(string memory message) {\\r\\n        require(msg.sender == deployer,message);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(){\\r\\n        deployer = msg.sender;\\r\\n    }\\r\\n    // proposal creation\\r\\n    function createProposal (\\r\\n        string calldata title,\\r\\n        string calldata description,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    )external stakeholderOnly(\\\"Only stakeholders are allowed to create Proposals\\\") returns(Proposals memory){\\r\\n        uint256 currentID = totalProposals++;\\r\\n        Proposals storage StakeholderProposal = raisedProposals[currentID];\\r\\n        StakeholderProposal.id = currentID;\\r\\n        StakeholderProposal.amount = amount;\\r\\n        StakeholderProposal.title = title;\\r\\n        StakeholderProposal.description = description;\\r\\n        StakeholderProposal.beneficiary = payable(beneficiary);\\r\\n        StakeholderProposal.duration = block.timestamp + MIN_VOTE_PERIOD;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,       \\r\\n            'Proposal Raised',\\r\\n            beneficiary,\\r\\n            amount\\r\\n        );\\r\\n        return StakeholderProposal;\\r\\n    }\\r\\n\\r\\n    // voting\\r\\n    function performVote(uint256 proposalId,bool chosen) external \\r\\n    stakeholderOnly(\\\"Only stakeholders can perform voting\\\")\\r\\n    returns(Voted memory)\\r\\n    {\\r\\n        Proposals storage StakeholderProposal = raisedProposals[proposalId];\\r\\n        handleVoting(StakeholderProposal);\\r\\n        if(chosen) StakeholderProposal.upVote++;\\r\\n        else StakeholderProposal.downVotes++;\\r\\n\\r\\n        stakeholderVotes[msg.sender].push(\\r\\n            StakeholderProposal.id\\r\\n        );\\r\\n        votedOn[StakeholderProposal.id].push(\\r\\n            Voted(\\r\\n                msg.sender,\\r\\n                block.timestamp,\\r\\n                chosen                \\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit VoteAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PROPOSAL VOTE\\\",\\r\\n            StakeholderProposal.beneficiary,\\r\\n            StakeholderProposal.amount,\\r\\n            StakeholderProposal.upVote,\\r\\n            StakeholderProposal.downVotes,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n        return Voted(\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    // handling vote\\r\\n    function handleVoting(Proposals storage proposal) private {\\r\\n        if (proposal.passed || proposal.duration <= block.timestamp) {\\r\\n            proposal.passed = true;\\r\\n            revert(\\\"Time has already passed\\\");\\r\\n        }\\r\\n        uint256[] memory tempVotes = stakeholderVotes[msg.sender];\\r\\n        for (uint256 vote = 0; vote < tempVotes.length; vote++) {\\r\\n            if (proposal.id == tempVotes[vote])\\r\\n                revert(\\\"double voting is not allowed\\\");  \\r\\n        }\\r\\n                \\r\\n    }\\r\\n\\r\\n    // pay beneficiary\\r\\n    function payBeneficiary(uint proposalId) external \\r\\n    stakeholderOnly(\\\"Only stakeholders can make payment\\\") onlyDeployer(\\\"Only deployer can make payment\\\") nonReentrant() returns(uint256){\\r\\n        Proposals storage stakeholderProposal = raisedProposals[proposalId];\\r\\n        require(balance >= stakeholderProposal.amount, \\\"insufficient fund\\\");\\r\\n        if(stakeholderProposal.paid == true) revert(\\\"payment already made\\\");\\r\\n        if(stakeholderProposal.upVote <= stakeholderProposal.downVotes) revert(\\\"insufficient votes\\\");\\r\\n\\r\\n        pay(stakeholderProposal.amount,stakeholderProposal.beneficiary);\\r\\n        stakeholderProposal.paid = true;\\r\\n        stakeholderProposal.executor = msg.sender;\\r\\n        balance -= stakeholderProposal.amount;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PAYMENT SUCCESSFULLY MADE!\\\",\\r\\n            stakeholderProposal.beneficiary,\\r\\n            stakeholderProposal.amount\\r\\n        );\\r\\n\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // paymment functionality\\r\\n    function pay(uint256 amount,address to) internal returns(bool){\\r\\n        (bool success,) = payable(to).call{value : amount}(\\\"\\\");\\r\\n        require(success, \\\"payment failed\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // contribution functionality\\r\\n    function contribute() payable external returns(uint256){\\r\\n        require(msg.value > 0 ether, \\\"invalid amount\\\");\\r\\n        if (!hasRole(STAKEHOLDER_ROLE, msg.sender)) {\\r\\n            uint256 totalContributions = contributors[msg.sender] + msg.value;\\r\\n\\r\\n            if (totalContributions >= STAKEHOLDER_MIN_CONTRIBUTION) {\\r\\n                stakeholders[msg.sender] = msg.value;\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                _setupRole(STAKEHOLDER_ROLE,msg.sender);\\r\\n                _setupRole(COLLABORATOR_ROLE, msg.sender);\\r\\n            }\\r\\n            else {\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                _setupRole(COLLABORATOR_ROLE,msg.sender);\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            stakeholders[msg.sender] += msg.value;\\r\\n            contributors[msg.sender] += msg.value;\\r\\n        }\\r\\n\\r\\n        balance += msg.value;\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"CONTRIBUTION SUCCESSFULLY RECEIVED!\\\",\\r\\n            address(this),\\r\\n            msg.value\\r\\n        );\\r\\n\\r\\n\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    // get single proposal\\r\\n    function getProposals(uint256 proposalID) external view returns(Proposals memory) {\\r\\n        return raisedProposals[proposalID];\\r\\n    }\\r\\n\\r\\n    // get all proposals\\r\\n    function getAllProposals() external view returns(Proposals[] memory props){\\r\\n        props = new Proposals[](totalProposals);\\r\\n        for (uint i = 0; i < totalProposals; i++) {\\r\\n            props[i] = raisedProposals[i];\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    // get a specific proposal votes\\r\\n    function getProposalVote(uint256 proposalID) external view returns(Voted[] memory){\\r\\n        return votedOn[proposalID];\\r\\n    }\\r\\n\\r\\n    // get stakeholders votes\\r\\n    function getStakeholdersVotes() stakeholderOnly(\\\"Unauthorized\\\") external view returns(uint256[] memory){\\r\\n        return stakeholderVotes[msg.sender];\\r\\n    }   \\r\\n\\r\\n    // get stakeholders balances\\r\\n    function getStakeholdersBalances() stakeholderOnly(\\\"unauthorized\\\") external view returns(uint256){\\r\\n        return stakeholders[msg.sender];\\r\\n\\r\\n    }\\r\\n\\r\\n     // get total balances\\r\\n    function getTotalBalance() external view returns(uint256){\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // check if stakeholder\\r\\n    function stakeholderStatus() external view returns(bool){\\r\\n        return stakeholders[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check if contributor\\r\\n    function isContributor() external view returns(bool){\\r\\n        return contributors[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check contributors balance\\r\\n    function getContributorsBalance() contributorOnly(\\\"unathorized\\\") external view returns(uint256){\\r\\n        return contributors[msg.sender];\\r\\n    }\\r\\n    \\r\\n    function getDeployer()external view returns(address){\\r\\n        return deployer;\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf8164115e967ba323e7c57ab0c9a77e9a074320c1652091543f9f19c3c1684b0\"}},\"version\":1}",
  "bytecode": "0x61010060405267016345785d8a000060809081525061012c60a0908152507fd3cd73767648ee32815639d235132b56387142ddb995e593e7f0b0db442a7d4860c0908152507f193aaa92f8a12e564bc860f8d10b1c1f937927ff6a6e804d359875acec3e5a5a60e09081525034801561007757600080fd5b506001808190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805160a05160c05160e05161407a61014d600039600081816105cd0152818161092f01528181610dae01528181610f2f015281816110cb0152818161152d015281816117ba01528181611c3b01528181611d7901528181611f6b015261202f0152600081816113e801528181611da30152611e280152600061104801526000611cb5015261407a6000f3fe60806040526004361061012a5760003560e01c80637cdc2eb7116100ab578063cceb68f51161006f578063cceb68f514610440578063d547741f1461046b578063d6cc801614610494578063d7bb99ba146104bf578063f43327d2146104dd578063ff4b0db7146105085761012a565b80637cdc2eb71461033357806383047f801461037057806391d148541461039b578063a217fddf146103d8578063b31f111c146104035761012a565b80632c72fdfc116100f25780632c72fdfc1461024e5780632f2ff15d1461028b578063341edbed146102b457806336568abe146102df57806372630531146103085761012a565b806301ffc9a71461012f578063119c37c81461016c57806312b58349146101a95780631c9b2f35146101d4578063248a9ca314610211575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612af9565b610533565b6040516101639190612b41565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612b92565b6105ad565b6040516101a09190612bce565b60405180910390f35b3480156101b557600080fd5b506101be61097e565b6040516101cb9190612bce565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612b92565b610988565b6040516102089190612d39565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190612d91565b610a75565b6040516102459190612dcd565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190612b92565b610a94565b6040516102829190612fad565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612ffb565b610d50565b005b3480156102c057600080fd5b506102c9610d71565b6040516102d69190612bce565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190612ffb565b610e5c565b005b34801561031457600080fd5b5061031d610edf565b60405161032a919061304a565b60405180910390f35b34801561033f57600080fd5b5061035a600480360381019061035591906130ca565b610f09565b6040516103679190612fad565b60405180910390f35b34801561037c57600080fd5b506103856113ab565b6040516103929190612bce565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd9190612ffb565b611496565b6040516103cf9190612b41565b60405180910390f35b3480156103e457600080fd5b506103ed611500565b6040516103fa9190612dcd565b60405180910390f35b34801561040f57600080fd5b5061042a6004803603810190610425919061319d565b611507565b604051610437919061321f565b60405180910390f35b34801561044c57600080fd5b5061045561183f565b6040516104629190613407565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d9190612ffb565b611b88565b005b3480156104a057600080fd5b506104a9611ba9565b6040516104b69190612b41565b60405180910390f35b6104c7611bf2565b6040516104d49190612bce565b60405180910390f35b3480156104e957600080fd5b506104f2611fa9565b6040516104ff9190612b41565b60405180910390f35b34801561051457600080fd5b5061051d611ff2565b60405161052a91906134d8565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a657506105a58261212b565b5b9050919050565b6000604051806060016040528060228152602001613ff2602291396105f27f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613544565b60405180910390fd5b506040518060400160405280601e81526020017f4f6e6c79206465706c6f7965722063616e206d616b65207061796d656e740000815250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161481906106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f59190613544565b60405180910390fd5b50610707612195565b600060056000868152602001908152602001600020905080600101546003541015610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e906135b2565b60405180910390fd5b600115158160070160009054906101000a900460ff16151514156107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b79061361e565b60405180910390fd5b806003015481600201541161080a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108019061368a565b60405180910390fd5b61083c81600101548260070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166121e5565b5060018160070160006101000a81548160ff021916908315150217905550338160090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010154600360008282546108b391906136d9565b925050819055508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f00000000000000000000000000000000000000000000000000000000000000008460010154604051610961929190613759565b60405180910390a360035493505061097761229d565b5050919050565b6000600354905090565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610a6a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050815260200190600101906109bd565b505050509050919050565b6000806000838152602001908152602001600020600101549050919050565b610a9c612914565b60056000838152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054610afd906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b29906137c4565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b50505050508152602001600682018054610b8f906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbb906137c4565b8015610c085780601f10610bdd57610100808354040283529160200191610c08565b820191906000526020600020905b815481529060010190602001808311610beb57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b610d5982610a75565b610d62816122a6565b610d6c83836122ba565b505050565b60006040518060400160405280600c81526020017f756e617574686f72697a65640000000000000000000000000000000000000000815250610dd37f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190613544565b60405180910390fd5b50600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b610e6461239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890613868565b60405180910390fd5b610edb82826123a2565b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f11612914565b60405180606001604052806031815260200161401460319139610f547f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8d9190613544565b60405180910390fd5b50600060026000815480929190610fac90613888565b91905055905060006005600083815260200190815260200160002090508181600001819055508481600101819055508989826005019190610fee9291906129bb565b5087878260060191906110029291906129bb565b50858160070160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f00000000000000000000000000000000000000000000000000000000000000004261107291906138d1565b81600401819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f0000000000000000000000000000000000000000000000000000000000000000886040516110f9929190613973565b60405180910390a380604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054611150906137c4565b80601f016020809104026020016040519081016040528092919081815260200182805461117c906137c4565b80156111c95780601f1061119e576101008083540402835291602001916111c9565b820191906000526020600020905b8154815290600101906020018083116111ac57829003601f168201915b505050505081526020016006820180546111e2906137c4565b80601f016020809104026020016040519081016040528092919081815260200182805461120e906137c4565b801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505093505050509695505050505050565b60006040518060400160405280600b81526020017f756e6174686f72697a656400000000000000000000000000000000000000000081525061140d7f000000000000000000000000000000000000000000000000000000000000000033611496565b819061144f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114469190613544565b60405180910390fd5b50600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61150f612a41565b604051806060016040528060248152602001613fce602491396115527f000000000000000000000000000000000000000000000000000000000000000033611496565b8190611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9190613544565b60405180910390fd5b5060006005600086815260200190815260200160002090506115b581612483565b83156115da578060020160008154809291906115d090613888565b91905055506115f5565b8060030160008154809291906115ef90613888565b91905055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600001549080600181540180825580915050600190039060005260206000200160009091909190915055600760008260000154815260200190815260200160002060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001861515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f547e0c985508bf44e88e036a89b60fb24d98f87250028cb1b4f9991ab734e6957f00000000000000000000000000000000000000000000000000000000000000008460010154856002015486600301548a6040516117fa9594939291906139fb565b60405180910390a360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018515158152509250505092915050565b606060025467ffffffffffffffff81111561185d5761185c613a61565b5b60405190808252806020026020018201604052801561189657816020015b611883612914565b81526020019060019003908161187b5790505b50905060005b600254811015611b845760056000828152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054611907906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611933906137c4565b80156119805780601f1061195557610100808354040283529160200191611980565b820191906000526020600020905b81548152906001019060200180831161196357829003601f168201915b50505050508152602001600682018054611999906137c4565b80601f01602080910402602001604051908101604052809291908181526020018280546119c5906137c4565b8015611a125780601f106119e757610100808354040283529160200191611a12565b820191906000526020600020905b8154815290600101906020018083116119f557829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110611b6657611b65613a90565b5b60200260200101819052508080611b7c90613888565b91505061189c565b5090565b611b9182610a75565b611b9a816122a6565b611ba483836123a2565b505050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b6000803411611c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2d90613b0b565b60405180910390fd5b611c607f000000000000000000000000000000000000000000000000000000000000000033611496565b611e5457600034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb191906138d1565b90507f00000000000000000000000000000000000000000000000000000000000000008110611dcd5734600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d6d91906138d1565b92505081905550611d9e7f000000000000000000000000000000000000000000000000000000000000000033612618565b611dc87f000000000000000000000000000000000000000000000000000000000000000033612618565b611e4e565b34600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e1c91906138d1565b92505081905550611e4d7f000000000000000000000000000000000000000000000000000000000000000033612618565b5b50611f01565b34600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ea391906138d1565b9250508190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ef991906138d1565b925050819055505b3460036000828254611f1391906138d1565b925050819055503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f000000000000000000000000000000000000000000000000000000000000000034604051611f99929190613b9d565b60405180910390a3600354905090565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b60606040518060400160405280600c81526020017f556e617574686f72697a656400000000000000000000000000000000000000008152506120547f000000000000000000000000000000000000000000000000000000000000000033611496565b8190612096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208d9190613544565b60405180910390fd5b50600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561212057602002820191906000526020600020905b81548152602001906001019080831161210c575b505050505091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600260015414156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d290613c25565b60405180910390fd5b6002600181905550565b6000808273ffffffffffffffffffffffffffffffffffffffff168460405161220c90613c76565b60006040518083038185875af1925050503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b5050905080612292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228990613cd7565b60405180910390fd5b600191505092915050565b60018081905550565b6122b7816122b261239a565b612626565b50565b6122c48282611496565b61239657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061233b61239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6123ac8282611496565b1561247f57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061242461239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8060070160019054906101000a900460ff16806124a4575042816004015411155b156125015760018160070160016101000a81548160ff0219169083151502179055506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f890613d43565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561258c57602002820191906000526020600020905b815481526020019060010190808311612578575b5050505050905060005b8151811015612613578181815181106125b2576125b1613a90565b5b602002602001015183600001541415612600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f790613daf565b60405180910390fd5b808061260b90613888565b915050612596565b505050565b61262282826122ba565b5050565b6126308282611496565b6126a75761263d816126ab565b61264b8360001c60206126d8565b60405160200161265c929190613ea3565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269e9190613544565b60405180910390fd5b5050565b60606126d18273ffffffffffffffffffffffffffffffffffffffff16601460ff166126d8565b9050919050565b6060600060028360026126eb9190613edd565b6126f591906138d1565b67ffffffffffffffff81111561270e5761270d613a61565b5b6040519080825280601f01601f1916602001820160405280156127405781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061277857612777613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106127dc576127db613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261281c9190613edd565b61282691906138d1565b90505b60018111156128c6577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061286857612867613a90565b5b1a60f81b82828151811061287f5761287e613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806128bf90613f37565b9050612829565b506000841461290a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290190613fad565b60405180910390fd5b8091505092915050565b60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b8280546129c7906137c4565b90600052602060002090601f0160209004810192826129e95760008555612a30565b82601f10612a0257803560ff1916838001178555612a30565b82800160010185558215612a30579182015b82811115612a2f578235825591602001919060010190612a14565b5b509050612a3d9190612a7a565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b5b80821115612a93576000816000905550600101612a7b565b5090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ad681612aa1565b8114612ae157600080fd5b50565b600081359050612af381612acd565b92915050565b600060208284031215612b0f57612b0e612a97565b5b6000612b1d84828501612ae4565b91505092915050565b60008115159050919050565b612b3b81612b26565b82525050565b6000602082019050612b566000830184612b32565b92915050565b6000819050919050565b612b6f81612b5c565b8114612b7a57600080fd5b50565b600081359050612b8c81612b66565b92915050565b600060208284031215612ba857612ba7612a97565b5b6000612bb684828501612b7d565b91505092915050565b612bc881612b5c565b82525050565b6000602082019050612be36000830184612bbf565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c4082612c15565b9050919050565b612c5081612c35565b82525050565b612c5f81612b5c565b82525050565b612c6e81612b26565b82525050565b606082016000820151612c8a6000850182612c47565b506020820151612c9d6020850182612c56565b506040820151612cb06040850182612c65565b50505050565b6000612cc28383612c74565b60608301905092915050565b6000602082019050919050565b6000612ce682612be9565b612cf08185612bf4565b9350612cfb83612c05565b8060005b83811015612d2c578151612d138882612cb6565b9750612d1e83612cce565b925050600181019050612cff565b5085935050505092915050565b60006020820190508181036000830152612d538184612cdb565b905092915050565b6000819050919050565b612d6e81612d5b565b8114612d7957600080fd5b50565b600081359050612d8b81612d65565b92915050565b600060208284031215612da757612da6612a97565b5b6000612db584828501612d7c565b91505092915050565b612dc781612d5b565b82525050565b6000602082019050612de26000830184612dbe565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e22578082015181840152602081019050612e07565b83811115612e31576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e5382612de8565b612e5d8185612df3565b9350612e6d818560208601612e04565b612e7681612e37565b840191505092915050565b6000612e8c82612c15565b9050919050565b612e9c81612e81565b82525050565b600061018083016000830151612ebb6000860182612c56565b506020830151612ece6020860182612c56565b506040830151612ee16040860182612c56565b506060830151612ef46060860182612c56565b506080830151612f076080860182612c56565b5060a083015184820360a0860152612f1f8282612e48565b91505060c083015184820360c0860152612f398282612e48565b91505060e0830151612f4e60e0860182612c65565b50610100830151612f63610100860182612c65565b50610120830151612f78610120860182612e93565b50610140830151612f8d610140860182612c47565b50610160830151612fa2610160860182612c47565b508091505092915050565b60006020820190508181036000830152612fc78184612ea2565b905092915050565b612fd881612c35565b8114612fe357600080fd5b50565b600081359050612ff581612fcf565b92915050565b6000806040838503121561301257613011612a97565b5b600061302085828601612d7c565b925050602061303185828601612fe6565b9150509250929050565b61304481612c35565b82525050565b600060208201905061305f600083018461303b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261308a57613089613065565b5b8235905067ffffffffffffffff8111156130a7576130a661306a565b5b6020830191508360018202830111156130c3576130c261306f565b5b9250929050565b600080600080600080608087890312156130e7576130e6612a97565b5b600087013567ffffffffffffffff81111561310557613104612a9c565b5b61311189828a01613074565b9650965050602087013567ffffffffffffffff81111561313457613133612a9c565b5b61314089828a01613074565b9450945050604061315389828a01612fe6565b925050606061316489828a01612b7d565b9150509295509295509295565b61317a81612b26565b811461318557600080fd5b50565b60008135905061319781613171565b92915050565b600080604083850312156131b4576131b3612a97565b5b60006131c285828601612b7d565b92505060206131d385828601613188565b9150509250929050565b6060820160008201516131f36000850182612c47565b5060208201516132066020850182612c56565b5060408201516132196040850182612c65565b50505050565b600060608201905061323460008301846131dd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006101808301600083015161327f6000860182612c56565b5060208301516132926020860182612c56565b5060408301516132a56040860182612c56565b5060608301516132b86060860182612c56565b5060808301516132cb6080860182612c56565b5060a083015184820360a08601526132e38282612e48565b91505060c083015184820360c08601526132fd8282612e48565b91505060e083015161331260e0860182612c65565b50610100830151613327610100860182612c65565b5061012083015161333c610120860182612e93565b50610140830151613351610140860182612c47565b50610160830151613366610160860182612c47565b508091505092915050565b600061337d8383613266565b905092915050565b6000602082019050919050565b600061339d8261323a565b6133a78185613245565b9350836020820285016133b985613256565b8060005b858110156133f557848403895281516133d68582613371565b94506133e183613385565b925060208a019950506001810190506133bd565b50829750879550505050505092915050565b600060208201905081810360008301526134218184613392565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006134618383612c56565b60208301905092915050565b6000602082019050919050565b600061348582613429565b61348f8185613434565b935061349a83613445565b8060005b838110156134cb5781516134b28882613455565b97506134bd8361346d565b92505060018101905061349e565b5085935050505092915050565b600060208201905081810360008301526134f2818461347a565b905092915050565b600082825260208201905092915050565b600061351682612de8565b61352081856134fa565b9350613530818560208601612e04565b61353981612e37565b840191505092915050565b6000602082019050818103600083015261355e818461350b565b905092915050565b7f696e73756666696369656e742066756e64000000000000000000000000000000600082015250565b600061359c6011836134fa565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b9050919050565b7f7061796d656e7420616c7265616479206d616465000000000000000000000000600082015250565b60006136086014836134fa565b9150613613826135d2565b602082019050919050565b60006020820190508181036000830152613637816135fb565b9050919050565b7f696e73756666696369656e7420766f7465730000000000000000000000000000600082015250565b60006136746012836134fa565b915061367f8261363e565b602082019050919050565b600060208201905081810360008301526136a381613667565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e482612b5c565b91506136ef83612b5c565b925082821015613702576137016136aa565b5b828203905092915050565b7f5041594d454e54205355434345535346554c4c59204d41444521000000000000600082015250565b6000613743601a836134fa565b915061374e8261370d565b602082019050919050565b600060608201905061376e6000830185612dbe565b818103602083015261377f81613736565b905061378e6040830184612bbf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137dc57607f821691505b602082108114156137f0576137ef613795565b5b50919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613852602f836134fa565b915061385d826137f6565b604082019050919050565b6000602082019050818103600083015261388181613845565b9050919050565b600061389382612b5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138c6576138c56136aa565b5b600182019050919050565b60006138dc82612b5c565b91506138e783612b5c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561391c5761391b6136aa565b5b828201905092915050565b7f50726f706f73616c205261697365640000000000000000000000000000000000600082015250565b600061395d600f836134fa565b915061396882613927565b602082019050919050565b60006060820190506139886000830185612dbe565b818103602083015261399981613950565b90506139a86040830184612bbf565b9392505050565b7f50524f504f53414c20564f544500000000000000000000000000000000000000600082015250565b60006139e5600d836134fa565b91506139f0826139af565b602082019050919050565b600060c082019050613a106000830188612dbe565b8181036020830152613a21816139d8565b9050613a306040830187612bbf565b613a3d6060830186612bbf565b613a4a6080830185612bbf565b613a5760a0830184612b32565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000613af5600e836134fa565b9150613b0082613abf565b602082019050919050565b60006020820190508181036000830152613b2481613ae8565b9050919050565b7f434f4e545249425554494f4e205355434345535346554c4c592052454345495660008201527f4544210000000000000000000000000000000000000000000000000000000000602082015250565b6000613b876023836134fa565b9150613b9282613b2b565b604082019050919050565b6000606082019050613bb26000830185612dbe565b8181036020830152613bc381613b7a565b9050613bd26040830184612bbf565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613c0f601f836134fa565b9150613c1a82613bd9565b602082019050919050565b60006020820190508181036000830152613c3e81613c02565b9050919050565b600081905092915050565b50565b6000613c60600083613c45565b9150613c6b82613c50565b600082019050919050565b6000613c8182613c53565b9150819050919050565b7f7061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000613cc1600e836134fa565b9150613ccc82613c8b565b602082019050919050565b60006020820190508181036000830152613cf081613cb4565b9050919050565b7f54696d652068617320616c726561647920706173736564000000000000000000600082015250565b6000613d2d6017836134fa565b9150613d3882613cf7565b602082019050919050565b60006020820190508181036000830152613d5c81613d20565b9050919050565b7f646f75626c6520766f74696e67206973206e6f7420616c6c6f77656400000000600082015250565b6000613d99601c836134fa565b9150613da482613d63565b602082019050919050565b60006020820190508181036000830152613dc881613d8c565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613e10601783613dcf565b9150613e1b82613dda565b601782019050919050565b6000613e3182612de8565b613e3b8185613dcf565b9350613e4b818560208601612e04565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613e8d601183613dcf565b9150613e9882613e57565b601182019050919050565b6000613eae82613e03565b9150613eba8285613e26565b9150613ec582613e80565b9150613ed18284613e26565b91508190509392505050565b6000613ee882612b5c565b9150613ef383612b5c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f2c57613f2b6136aa565b5b828202905092915050565b6000613f4282612b5c565b91506000821415613f5657613f556136aa565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613f976020836134fa565b9150613fa282613f61565b602082019050919050565b60006020820190508181036000830152613fc681613f8a565b905091905056fe4f6e6c79207374616b65686f6c646572732063616e20706572666f726d20766f74696e674f6e6c79207374616b65686f6c646572732063616e206d616b65207061796d656e744f6e6c79207374616b65686f6c646572732061726520616c6c6f77656420746f206372656174652050726f706f73616c73a26469706673582212208811c47dd94e6d7fde982725388789875800e978c9c4bc9e56762d227349422164736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80637cdc2eb7116100ab578063cceb68f51161006f578063cceb68f514610440578063d547741f1461046b578063d6cc801614610494578063d7bb99ba146104bf578063f43327d2146104dd578063ff4b0db7146105085761012a565b80637cdc2eb71461033357806383047f801461037057806391d148541461039b578063a217fddf146103d8578063b31f111c146104035761012a565b80632c72fdfc116100f25780632c72fdfc1461024e5780632f2ff15d1461028b578063341edbed146102b457806336568abe146102df57806372630531146103085761012a565b806301ffc9a71461012f578063119c37c81461016c57806312b58349146101a95780631c9b2f35146101d4578063248a9ca314610211575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612af9565b610533565b6040516101639190612b41565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612b92565b6105ad565b6040516101a09190612bce565b60405180910390f35b3480156101b557600080fd5b506101be61097e565b6040516101cb9190612bce565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612b92565b610988565b6040516102089190612d39565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190612d91565b610a75565b6040516102459190612dcd565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190612b92565b610a94565b6040516102829190612fad565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612ffb565b610d50565b005b3480156102c057600080fd5b506102c9610d71565b6040516102d69190612bce565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190612ffb565b610e5c565b005b34801561031457600080fd5b5061031d610edf565b60405161032a919061304a565b60405180910390f35b34801561033f57600080fd5b5061035a600480360381019061035591906130ca565b610f09565b6040516103679190612fad565b60405180910390f35b34801561037c57600080fd5b506103856113ab565b6040516103929190612bce565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd9190612ffb565b611496565b6040516103cf9190612b41565b60405180910390f35b3480156103e457600080fd5b506103ed611500565b6040516103fa9190612dcd565b60405180910390f35b34801561040f57600080fd5b5061042a6004803603810190610425919061319d565b611507565b604051610437919061321f565b60405180910390f35b34801561044c57600080fd5b5061045561183f565b6040516104629190613407565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d9190612ffb565b611b88565b005b3480156104a057600080fd5b506104a9611ba9565b6040516104b69190612b41565b60405180910390f35b6104c7611bf2565b6040516104d49190612bce565b60405180910390f35b3480156104e957600080fd5b506104f2611fa9565b6040516104ff9190612b41565b60405180910390f35b34801561051457600080fd5b5061051d611ff2565b60405161052a91906134d8565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a657506105a58261212b565b5b9050919050565b6000604051806060016040528060228152602001613ff2602291396105f27f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613544565b60405180910390fd5b506040518060400160405280601e81526020017f4f6e6c79206465706c6f7965722063616e206d616b65207061796d656e740000815250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161481906106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f59190613544565b60405180910390fd5b50610707612195565b600060056000868152602001908152602001600020905080600101546003541015610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e906135b2565b60405180910390fd5b600115158160070160009054906101000a900460ff16151514156107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b79061361e565b60405180910390fd5b806003015481600201541161080a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108019061368a565b60405180910390fd5b61083c81600101548260070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166121e5565b5060018160070160006101000a81548160ff021916908315150217905550338160090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010154600360008282546108b391906136d9565b925050819055508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f00000000000000000000000000000000000000000000000000000000000000008460010154604051610961929190613759565b60405180910390a360035493505061097761229d565b5050919050565b6000600354905090565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610a6a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050815260200190600101906109bd565b505050509050919050565b6000806000838152602001908152602001600020600101549050919050565b610a9c612914565b60056000838152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054610afd906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b29906137c4565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b50505050508152602001600682018054610b8f906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbb906137c4565b8015610c085780601f10610bdd57610100808354040283529160200191610c08565b820191906000526020600020905b815481529060010190602001808311610beb57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b610d5982610a75565b610d62816122a6565b610d6c83836122ba565b505050565b60006040518060400160405280600c81526020017f756e617574686f72697a65640000000000000000000000000000000000000000815250610dd37f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190613544565b60405180910390fd5b50600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b610e6461239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890613868565b60405180910390fd5b610edb82826123a2565b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f11612914565b60405180606001604052806031815260200161401460319139610f547f000000000000000000000000000000000000000000000000000000000000000033611496565b8190610f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8d9190613544565b60405180910390fd5b50600060026000815480929190610fac90613888565b91905055905060006005600083815260200190815260200160002090508181600001819055508481600101819055508989826005019190610fee9291906129bb565b5087878260060191906110029291906129bb565b50858160070160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f00000000000000000000000000000000000000000000000000000000000000004261107291906138d1565b81600401819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f0000000000000000000000000000000000000000000000000000000000000000886040516110f9929190613973565b60405180910390a380604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054611150906137c4565b80601f016020809104026020016040519081016040528092919081815260200182805461117c906137c4565b80156111c95780601f1061119e576101008083540402835291602001916111c9565b820191906000526020600020905b8154815290600101906020018083116111ac57829003601f168201915b505050505081526020016006820180546111e2906137c4565b80601f016020809104026020016040519081016040528092919081815260200182805461120e906137c4565b801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505093505050509695505050505050565b60006040518060400160405280600b81526020017f756e6174686f72697a656400000000000000000000000000000000000000000081525061140d7f000000000000000000000000000000000000000000000000000000000000000033611496565b819061144f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114469190613544565b60405180910390fd5b50600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61150f612a41565b604051806060016040528060248152602001613fce602491396115527f000000000000000000000000000000000000000000000000000000000000000033611496565b8190611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9190613544565b60405180910390fd5b5060006005600086815260200190815260200160002090506115b581612483565b83156115da578060020160008154809291906115d090613888565b91905055506115f5565b8060030160008154809291906115ef90613888565b91905055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600001549080600181540180825580915050600190039060005260206000200160009091909190915055600760008260000154815260200190815260200160002060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001861515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f547e0c985508bf44e88e036a89b60fb24d98f87250028cb1b4f9991ab734e6957f00000000000000000000000000000000000000000000000000000000000000008460010154856002015486600301548a6040516117fa9594939291906139fb565b60405180910390a360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018515158152509250505092915050565b606060025467ffffffffffffffff81111561185d5761185c613a61565b5b60405190808252806020026020018201604052801561189657816020015b611883612914565b81526020019060019003908161187b5790505b50905060005b600254811015611b845760056000828152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054611907906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611933906137c4565b80156119805780601f1061195557610100808354040283529160200191611980565b820191906000526020600020905b81548152906001019060200180831161196357829003601f168201915b50505050508152602001600682018054611999906137c4565b80601f01602080910402602001604051908101604052809291908181526020018280546119c5906137c4565b8015611a125780601f106119e757610100808354040283529160200191611a12565b820191906000526020600020905b8154815290600101906020018083116119f557829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110611b6657611b65613a90565b5b60200260200101819052508080611b7c90613888565b91505061189c565b5090565b611b9182610a75565b611b9a816122a6565b611ba483836123a2565b505050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b6000803411611c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2d90613b0b565b60405180910390fd5b611c607f000000000000000000000000000000000000000000000000000000000000000033611496565b611e5457600034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb191906138d1565b90507f00000000000000000000000000000000000000000000000000000000000000008110611dcd5734600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d6d91906138d1565b92505081905550611d9e7f000000000000000000000000000000000000000000000000000000000000000033612618565b611dc87f000000000000000000000000000000000000000000000000000000000000000033612618565b611e4e565b34600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e1c91906138d1565b92505081905550611e4d7f000000000000000000000000000000000000000000000000000000000000000033612618565b5b50611f01565b34600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ea391906138d1565b9250508190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ef991906138d1565b925050819055505b3460036000828254611f1391906138d1565b925050819055503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f000000000000000000000000000000000000000000000000000000000000000034604051611f99929190613b9d565b60405180910390a3600354905090565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b60606040518060400160405280600c81526020017f556e617574686f72697a656400000000000000000000000000000000000000008152506120547f000000000000000000000000000000000000000000000000000000000000000033611496565b8190612096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208d9190613544565b60405180910390fd5b50600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561212057602002820191906000526020600020905b81548152602001906001019080831161210c575b505050505091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600260015414156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d290613c25565b60405180910390fd5b6002600181905550565b6000808273ffffffffffffffffffffffffffffffffffffffff168460405161220c90613c76565b60006040518083038185875af1925050503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b5050905080612292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228990613cd7565b60405180910390fd5b600191505092915050565b60018081905550565b6122b7816122b261239a565b612626565b50565b6122c48282611496565b61239657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061233b61239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6123ac8282611496565b1561247f57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061242461239a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8060070160019054906101000a900460ff16806124a4575042816004015411155b156125015760018160070160016101000a81548160ff0219169083151502179055506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f890613d43565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561258c57602002820191906000526020600020905b815481526020019060010190808311612578575b5050505050905060005b8151811015612613578181815181106125b2576125b1613a90565b5b602002602001015183600001541415612600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f790613daf565b60405180910390fd5b808061260b90613888565b915050612596565b505050565b61262282826122ba565b5050565b6126308282611496565b6126a75761263d816126ab565b61264b8360001c60206126d8565b60405160200161265c929190613ea3565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269e9190613544565b60405180910390fd5b5050565b60606126d18273ffffffffffffffffffffffffffffffffffffffff16601460ff166126d8565b9050919050565b6060600060028360026126eb9190613edd565b6126f591906138d1565b67ffffffffffffffff81111561270e5761270d613a61565b5b6040519080825280601f01601f1916602001820160405280156127405781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061277857612777613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106127dc576127db613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261281c9190613edd565b61282691906138d1565b90505b60018111156128c6577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061286857612867613a90565b5b1a60f81b82828151811061287f5761287e613a90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806128bf90613f37565b9050612829565b506000841461290a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290190613fad565b60405180910390fd5b8091505092915050565b60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b8280546129c7906137c4565b90600052602060002090601f0160209004810192826129e95760008555612a30565b82601f10612a0257803560ff1916838001178555612a30565b82800160010185558215612a30579182015b82811115612a2f578235825591602001919060010190612a14565b5b509050612a3d9190612a7a565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b5b80821115612a93576000816000905550600101612a7b565b5090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ad681612aa1565b8114612ae157600080fd5b50565b600081359050612af381612acd565b92915050565b600060208284031215612b0f57612b0e612a97565b5b6000612b1d84828501612ae4565b91505092915050565b60008115159050919050565b612b3b81612b26565b82525050565b6000602082019050612b566000830184612b32565b92915050565b6000819050919050565b612b6f81612b5c565b8114612b7a57600080fd5b50565b600081359050612b8c81612b66565b92915050565b600060208284031215612ba857612ba7612a97565b5b6000612bb684828501612b7d565b91505092915050565b612bc881612b5c565b82525050565b6000602082019050612be36000830184612bbf565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c4082612c15565b9050919050565b612c5081612c35565b82525050565b612c5f81612b5c565b82525050565b612c6e81612b26565b82525050565b606082016000820151612c8a6000850182612c47565b506020820151612c9d6020850182612c56565b506040820151612cb06040850182612c65565b50505050565b6000612cc28383612c74565b60608301905092915050565b6000602082019050919050565b6000612ce682612be9565b612cf08185612bf4565b9350612cfb83612c05565b8060005b83811015612d2c578151612d138882612cb6565b9750612d1e83612cce565b925050600181019050612cff565b5085935050505092915050565b60006020820190508181036000830152612d538184612cdb565b905092915050565b6000819050919050565b612d6e81612d5b565b8114612d7957600080fd5b50565b600081359050612d8b81612d65565b92915050565b600060208284031215612da757612da6612a97565b5b6000612db584828501612d7c565b91505092915050565b612dc781612d5b565b82525050565b6000602082019050612de26000830184612dbe565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e22578082015181840152602081019050612e07565b83811115612e31576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e5382612de8565b612e5d8185612df3565b9350612e6d818560208601612e04565b612e7681612e37565b840191505092915050565b6000612e8c82612c15565b9050919050565b612e9c81612e81565b82525050565b600061018083016000830151612ebb6000860182612c56565b506020830151612ece6020860182612c56565b506040830151612ee16040860182612c56565b506060830151612ef46060860182612c56565b506080830151612f076080860182612c56565b5060a083015184820360a0860152612f1f8282612e48565b91505060c083015184820360c0860152612f398282612e48565b91505060e0830151612f4e60e0860182612c65565b50610100830151612f63610100860182612c65565b50610120830151612f78610120860182612e93565b50610140830151612f8d610140860182612c47565b50610160830151612fa2610160860182612c47565b508091505092915050565b60006020820190508181036000830152612fc78184612ea2565b905092915050565b612fd881612c35565b8114612fe357600080fd5b50565b600081359050612ff581612fcf565b92915050565b6000806040838503121561301257613011612a97565b5b600061302085828601612d7c565b925050602061303185828601612fe6565b9150509250929050565b61304481612c35565b82525050565b600060208201905061305f600083018461303b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261308a57613089613065565b5b8235905067ffffffffffffffff8111156130a7576130a661306a565b5b6020830191508360018202830111156130c3576130c261306f565b5b9250929050565b600080600080600080608087890312156130e7576130e6612a97565b5b600087013567ffffffffffffffff81111561310557613104612a9c565b5b61311189828a01613074565b9650965050602087013567ffffffffffffffff81111561313457613133612a9c565b5b61314089828a01613074565b9450945050604061315389828a01612fe6565b925050606061316489828a01612b7d565b9150509295509295509295565b61317a81612b26565b811461318557600080fd5b50565b60008135905061319781613171565b92915050565b600080604083850312156131b4576131b3612a97565b5b60006131c285828601612b7d565b92505060206131d385828601613188565b9150509250929050565b6060820160008201516131f36000850182612c47565b5060208201516132066020850182612c56565b5060408201516132196040850182612c65565b50505050565b600060608201905061323460008301846131dd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006101808301600083015161327f6000860182612c56565b5060208301516132926020860182612c56565b5060408301516132a56040860182612c56565b5060608301516132b86060860182612c56565b5060808301516132cb6080860182612c56565b5060a083015184820360a08601526132e38282612e48565b91505060c083015184820360c08601526132fd8282612e48565b91505060e083015161331260e0860182612c65565b50610100830151613327610100860182612c65565b5061012083015161333c610120860182612e93565b50610140830151613351610140860182612c47565b50610160830151613366610160860182612c47565b508091505092915050565b600061337d8383613266565b905092915050565b6000602082019050919050565b600061339d8261323a565b6133a78185613245565b9350836020820285016133b985613256565b8060005b858110156133f557848403895281516133d68582613371565b94506133e183613385565b925060208a019950506001810190506133bd565b50829750879550505050505092915050565b600060208201905081810360008301526134218184613392565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006134618383612c56565b60208301905092915050565b6000602082019050919050565b600061348582613429565b61348f8185613434565b935061349a83613445565b8060005b838110156134cb5781516134b28882613455565b97506134bd8361346d565b92505060018101905061349e565b5085935050505092915050565b600060208201905081810360008301526134f2818461347a565b905092915050565b600082825260208201905092915050565b600061351682612de8565b61352081856134fa565b9350613530818560208601612e04565b61353981612e37565b840191505092915050565b6000602082019050818103600083015261355e818461350b565b905092915050565b7f696e73756666696369656e742066756e64000000000000000000000000000000600082015250565b600061359c6011836134fa565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b9050919050565b7f7061796d656e7420616c7265616479206d616465000000000000000000000000600082015250565b60006136086014836134fa565b9150613613826135d2565b602082019050919050565b60006020820190508181036000830152613637816135fb565b9050919050565b7f696e73756666696369656e7420766f7465730000000000000000000000000000600082015250565b60006136746012836134fa565b915061367f8261363e565b602082019050919050565b600060208201905081810360008301526136a381613667565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e482612b5c565b91506136ef83612b5c565b925082821015613702576137016136aa565b5b828203905092915050565b7f5041594d454e54205355434345535346554c4c59204d41444521000000000000600082015250565b6000613743601a836134fa565b915061374e8261370d565b602082019050919050565b600060608201905061376e6000830185612dbe565b818103602083015261377f81613736565b905061378e6040830184612bbf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137dc57607f821691505b602082108114156137f0576137ef613795565b5b50919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613852602f836134fa565b915061385d826137f6565b604082019050919050565b6000602082019050818103600083015261388181613845565b9050919050565b600061389382612b5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138c6576138c56136aa565b5b600182019050919050565b60006138dc82612b5c565b91506138e783612b5c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561391c5761391b6136aa565b5b828201905092915050565b7f50726f706f73616c205261697365640000000000000000000000000000000000600082015250565b600061395d600f836134fa565b915061396882613927565b602082019050919050565b60006060820190506139886000830185612dbe565b818103602083015261399981613950565b90506139a86040830184612bbf565b9392505050565b7f50524f504f53414c20564f544500000000000000000000000000000000000000600082015250565b60006139e5600d836134fa565b91506139f0826139af565b602082019050919050565b600060c082019050613a106000830188612dbe565b8181036020830152613a21816139d8565b9050613a306040830187612bbf565b613a3d6060830186612bbf565b613a4a6080830185612bbf565b613a5760a0830184612b32565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000613af5600e836134fa565b9150613b0082613abf565b602082019050919050565b60006020820190508181036000830152613b2481613ae8565b9050919050565b7f434f4e545249425554494f4e205355434345535346554c4c592052454345495660008201527f4544210000000000000000000000000000000000000000000000000000000000602082015250565b6000613b876023836134fa565b9150613b9282613b2b565b604082019050919050565b6000606082019050613bb26000830185612dbe565b8181036020830152613bc381613b7a565b9050613bd26040830184612bbf565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613c0f601f836134fa565b9150613c1a82613bd9565b602082019050919050565b60006020820190508181036000830152613c3e81613c02565b9050919050565b600081905092915050565b50565b6000613c60600083613c45565b9150613c6b82613c50565b600082019050919050565b6000613c8182613c53565b9150819050919050565b7f7061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000613cc1600e836134fa565b9150613ccc82613c8b565b602082019050919050565b60006020820190508181036000830152613cf081613cb4565b9050919050565b7f54696d652068617320616c726561647920706173736564000000000000000000600082015250565b6000613d2d6017836134fa565b9150613d3882613cf7565b602082019050919050565b60006020820190508181036000830152613d5c81613d20565b9050919050565b7f646f75626c6520766f74696e67206973206e6f7420616c6c6f77656400000000600082015250565b6000613d99601c836134fa565b9150613da482613d63565b602082019050919050565b60006020820190508181036000830152613dc881613d8c565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613e10601783613dcf565b9150613e1b82613dda565b601782019050919050565b6000613e3182612de8565b613e3b8185613dcf565b9350613e4b818560208601612e04565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613e8d601183613dcf565b9150613e9882613e57565b601182019050919050565b6000613eae82613e03565b9150613eba8285613e26565b9150613ec582613e80565b9150613ed18284613e26565b91508190509392505050565b6000613ee882612b5c565b9150613ef383612b5c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f2c57613f2b6136aa565b5b828202905092915050565b6000613f4282612b5c565b91506000821415613f5657613f556136aa565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613f976020836134fa565b9150613fa282613f61565b602082019050919050565b60006020820190508181036000830152613fc681613f8a565b905091905056fe4f6e6c79207374616b65686f6c646572732063616e20706572666f726d20766f74696e674f6e6c79207374616b65686f6c646572732063616e206d616b65207061796d656e744f6e6c79207374616b65686f6c646572732061726520616c6c6f77656420746f206372656174652050726f706f73616c73a26469706673582212208811c47dd94e6d7fde982725388789875800e978c9c4bc9e56762d227349422164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DAO.sol:Dao",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/DAO.sol:Dao",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1550,
        "contract": "contracts/DAO.sol:Dao",
        "label": "totalProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1552,
        "contract": "contracts/DAO.sol:Dao",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1554,
        "contract": "contracts/DAO.sol:Dao",
        "label": "deployer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1575,
        "contract": "contracts/DAO.sol:Dao",
        "label": "raisedProposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposals)1649_storage)"
      },
      {
        "astId": 1580,
        "contract": "contracts/DAO.sol:Dao",
        "label": "stakeholderVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1586,
        "contract": "contracts/DAO.sol:Dao",
        "label": "votedOn",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_struct(Voted)1656_storage)dyn_storage)"
      },
      {
        "astId": 1590,
        "contract": "contracts/DAO.sol:Dao",
        "label": "contributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1594,
        "contract": "contracts/DAO.sol:Dao",
        "label": "stakeholders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Voted)1656_storage)dyn_storage": {
        "base": "t_struct(Voted)1656_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Voted[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Voted)1656_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dao.Voted[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Voted)1656_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposals)1649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dao.Proposals)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposals)1649_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposals)1649_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Proposals",
        "members": [
          {
            "astId": 1626,
            "contract": "contracts/DAO.sol:Dao",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1628,
            "contract": "contracts/DAO.sol:Dao",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1630,
            "contract": "contracts/DAO.sol:Dao",
            "label": "upVote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1632,
            "contract": "contracts/DAO.sol:Dao",
            "label": "downVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1634,
            "contract": "contracts/DAO.sol:Dao",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1636,
            "contract": "contracts/DAO.sol:Dao",
            "label": "title",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1638,
            "contract": "contracts/DAO.sol:Dao",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1640,
            "contract": "contracts/DAO.sol:Dao",
            "label": "paid",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1642,
            "contract": "contracts/DAO.sol:Dao",
            "label": "passed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1644,
            "contract": "contracts/DAO.sol:Dao",
            "label": "beneficiary",
            "offset": 2,
            "slot": "7",
            "type": "t_address_payable"
          },
          {
            "astId": 1646,
            "contract": "contracts/DAO.sol:Dao",
            "label": "propoper",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1648,
            "contract": "contracts/DAO.sol:Dao",
            "label": "executor",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DAO.sol:Dao",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DAO.sol:Dao",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voted)1656_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Voted",
        "members": [
          {
            "astId": 1651,
            "contract": "contracts/DAO.sol:Dao",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1653,
            "contract": "contracts/DAO.sol:Dao",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1655,
            "contract": "contracts/DAO.sol:Dao",
            "label": "chosen",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}